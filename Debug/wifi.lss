
wifi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000007f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000054  00800060  000007f0  00000884  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  008000b4  008000b4  000008d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000008d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000908  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  00000944  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000013a7  00000000  00000000  00000ac4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a4b  00000000  00000000  00001e6b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b21  00000000  00000000  000028b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000026c  00000000  00000000  000033d8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000576  00000000  00000000  00003644  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007c2  00000000  00000000  00003bba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  0000437c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 84 03 	jmp	0x708	; 0x708 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ef       	ldi	r30, 0xF0	; 240
  68:	f7 e0       	ldi	r31, 0x07	; 7
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 3b       	cpi	r26, 0xB4	; 180
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a4 eb       	ldi	r26, 0xB4	; 180
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 3b       	cpi	r26, 0xB7	; 183
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 a3 01 	call	0x346	; 0x346 <main>
  8a:	0c 94 f6 03 	jmp	0x7ec	; 0x7ec <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_WritePin>:
	{
		PinValue = getbit(PIND,(PinNum-24));
	}

	return PinValue;
}
  92:	88 30       	cpi	r24, 0x08	; 8
  94:	e8 f4       	brcc	.+58     	; 0xd0 <DIO_WritePin+0x3e>
  96:	61 11       	cpse	r22, r1
  98:	0e c0       	rjmp	.+28     	; 0xb6 <DIO_WritePin+0x24>
  9a:	4b b3       	in	r20, 0x1b	; 27
  9c:	21 e0       	ldi	r18, 0x01	; 1
  9e:	30 e0       	ldi	r19, 0x00	; 0
  a0:	b9 01       	movw	r22, r18
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <DIO_WritePin+0x16>
  a4:	66 0f       	add	r22, r22
  a6:	77 1f       	adc	r23, r23
  a8:	8a 95       	dec	r24
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <DIO_WritePin+0x12>
  ac:	cb 01       	movw	r24, r22
  ae:	80 95       	com	r24
  b0:	84 23       	and	r24, r20
  b2:	8b bb       	out	0x1b, r24	; 27
  b4:	08 95       	ret
  b6:	4b b3       	in	r20, 0x1b	; 27
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	b9 01       	movw	r22, r18
  be:	02 c0       	rjmp	.+4      	; 0xc4 <DIO_WritePin+0x32>
  c0:	66 0f       	add	r22, r22
  c2:	77 1f       	adc	r23, r23
  c4:	8a 95       	dec	r24
  c6:	e2 f7       	brpl	.-8      	; 0xc0 <DIO_WritePin+0x2e>
  c8:	cb 01       	movw	r24, r22
  ca:	84 2b       	or	r24, r20
  cc:	8b bb       	out	0x1b, r24	; 27
  ce:	08 95       	ret
  d0:	98 ef       	ldi	r25, 0xF8	; 248
  d2:	98 0f       	add	r25, r24
  d4:	98 30       	cpi	r25, 0x08	; 8
  d6:	f0 f4       	brcc	.+60     	; 0x114 <DIO_WritePin+0x82>
  d8:	61 11       	cpse	r22, r1
  da:	0e c0       	rjmp	.+28     	; 0xf8 <DIO_WritePin+0x66>
  dc:	48 b3       	in	r20, 0x18	; 24
  de:	21 e0       	ldi	r18, 0x01	; 1
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	b9 01       	movw	r22, r18
  e4:	02 c0       	rjmp	.+4      	; 0xea <DIO_WritePin+0x58>
  e6:	66 0f       	add	r22, r22
  e8:	77 1f       	adc	r23, r23
  ea:	9a 95       	dec	r25
  ec:	e2 f7       	brpl	.-8      	; 0xe6 <DIO_WritePin+0x54>
  ee:	cb 01       	movw	r24, r22
  f0:	80 95       	com	r24
  f2:	84 23       	and	r24, r20
  f4:	88 bb       	out	0x18, r24	; 24
  f6:	08 95       	ret
  f8:	48 b3       	in	r20, 0x18	; 24
  fa:	88 50       	subi	r24, 0x08	; 8
  fc:	21 e0       	ldi	r18, 0x01	; 1
  fe:	30 e0       	ldi	r19, 0x00	; 0
 100:	b9 01       	movw	r22, r18
 102:	02 c0       	rjmp	.+4      	; 0x108 <DIO_WritePin+0x76>
 104:	66 0f       	add	r22, r22
 106:	77 1f       	adc	r23, r23
 108:	8a 95       	dec	r24
 10a:	e2 f7       	brpl	.-8      	; 0x104 <DIO_WritePin+0x72>
 10c:	cb 01       	movw	r24, r22
 10e:	84 2b       	or	r24, r20
 110:	88 bb       	out	0x18, r24	; 24
 112:	08 95       	ret
 114:	90 ef       	ldi	r25, 0xF0	; 240
 116:	98 0f       	add	r25, r24
 118:	98 30       	cpi	r25, 0x08	; 8
 11a:	f0 f4       	brcc	.+60     	; 0x158 <DIO_WritePin+0xc6>
 11c:	61 11       	cpse	r22, r1
 11e:	0e c0       	rjmp	.+28     	; 0x13c <DIO_WritePin+0xaa>
 120:	45 b3       	in	r20, 0x15	; 21
 122:	21 e0       	ldi	r18, 0x01	; 1
 124:	30 e0       	ldi	r19, 0x00	; 0
 126:	b9 01       	movw	r22, r18
 128:	02 c0       	rjmp	.+4      	; 0x12e <DIO_WritePin+0x9c>
 12a:	66 0f       	add	r22, r22
 12c:	77 1f       	adc	r23, r23
 12e:	9a 95       	dec	r25
 130:	e2 f7       	brpl	.-8      	; 0x12a <DIO_WritePin+0x98>
 132:	cb 01       	movw	r24, r22
 134:	80 95       	com	r24
 136:	84 23       	and	r24, r20
 138:	85 bb       	out	0x15, r24	; 21
 13a:	08 95       	ret
 13c:	45 b3       	in	r20, 0x15	; 21
 13e:	80 51       	subi	r24, 0x10	; 16
 140:	21 e0       	ldi	r18, 0x01	; 1
 142:	30 e0       	ldi	r19, 0x00	; 0
 144:	b9 01       	movw	r22, r18
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_WritePin+0xba>
 148:	66 0f       	add	r22, r22
 14a:	77 1f       	adc	r23, r23
 14c:	8a 95       	dec	r24
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_WritePin+0xb6>
 150:	cb 01       	movw	r24, r22
 152:	84 2b       	or	r24, r20
 154:	85 bb       	out	0x15, r24	; 21
 156:	08 95       	ret
 158:	98 ee       	ldi	r25, 0xE8	; 232
 15a:	98 0f       	add	r25, r24
 15c:	98 30       	cpi	r25, 0x08	; 8
 15e:	e8 f4       	brcc	.+58     	; 0x19a <DIO_WritePin+0x108>
 160:	61 11       	cpse	r22, r1
 162:	0e c0       	rjmp	.+28     	; 0x180 <DIO_WritePin+0xee>
 164:	42 b3       	in	r20, 0x12	; 18
 166:	21 e0       	ldi	r18, 0x01	; 1
 168:	30 e0       	ldi	r19, 0x00	; 0
 16a:	b9 01       	movw	r22, r18
 16c:	02 c0       	rjmp	.+4      	; 0x172 <DIO_WritePin+0xe0>
 16e:	66 0f       	add	r22, r22
 170:	77 1f       	adc	r23, r23
 172:	9a 95       	dec	r25
 174:	e2 f7       	brpl	.-8      	; 0x16e <DIO_WritePin+0xdc>
 176:	cb 01       	movw	r24, r22
 178:	80 95       	com	r24
 17a:	84 23       	and	r24, r20
 17c:	82 bb       	out	0x12, r24	; 18
 17e:	08 95       	ret
 180:	42 b3       	in	r20, 0x12	; 18
 182:	88 51       	subi	r24, 0x18	; 24
 184:	21 e0       	ldi	r18, 0x01	; 1
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	b9 01       	movw	r22, r18
 18a:	02 c0       	rjmp	.+4      	; 0x190 <DIO_WritePin+0xfe>
 18c:	66 0f       	add	r22, r22
 18e:	77 1f       	adc	r23, r23
 190:	8a 95       	dec	r24
 192:	e2 f7       	brpl	.-8      	; 0x18c <DIO_WritePin+0xfa>
 194:	cb 01       	movw	r24, r22
 196:	84 2b       	or	r24, r20
 198:	82 bb       	out	0x12, r24	; 18
 19a:	08 95       	ret

0000019c <DIO_SetPinDirection>:
void DIO_SetPinDirection(uint8 PinNum,uint8 PinDirection)
{
	if((PinNum>=0)&&(PinNum<=7))
 19c:	88 30       	cpi	r24, 0x08	; 8
 19e:	e8 f4       	brcc	.+58     	; 0x1da <DIO_SetPinDirection+0x3e>
	{
		if(PinDirection==0)
 1a0:	61 11       	cpse	r22, r1
 1a2:	0e c0       	rjmp	.+28     	; 0x1c0 <DIO_SetPinDirection+0x24>
		{
			clrbit(DDRA,PinNum);
 1a4:	4a b3       	in	r20, 0x1a	; 26
 1a6:	21 e0       	ldi	r18, 0x01	; 1
 1a8:	30 e0       	ldi	r19, 0x00	; 0
 1aa:	b9 01       	movw	r22, r18
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <DIO_SetPinDirection+0x16>
 1ae:	66 0f       	add	r22, r22
 1b0:	77 1f       	adc	r23, r23
 1b2:	8a 95       	dec	r24
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <DIO_SetPinDirection+0x12>
 1b6:	cb 01       	movw	r24, r22
 1b8:	80 95       	com	r24
 1ba:	84 23       	and	r24, r20
 1bc:	8a bb       	out	0x1a, r24	; 26
 1be:	08 95       	ret
		}
		else
		{
			setbit(DDRA,PinNum);
 1c0:	4a b3       	in	r20, 0x1a	; 26
 1c2:	21 e0       	ldi	r18, 0x01	; 1
 1c4:	30 e0       	ldi	r19, 0x00	; 0
 1c6:	b9 01       	movw	r22, r18
 1c8:	02 c0       	rjmp	.+4      	; 0x1ce <DIO_SetPinDirection+0x32>
 1ca:	66 0f       	add	r22, r22
 1cc:	77 1f       	adc	r23, r23
 1ce:	8a 95       	dec	r24
 1d0:	e2 f7       	brpl	.-8      	; 0x1ca <DIO_SetPinDirection+0x2e>
 1d2:	cb 01       	movw	r24, r22
 1d4:	84 2b       	or	r24, r20
 1d6:	8a bb       	out	0x1a, r24	; 26
 1d8:	08 95       	ret
		}
	}
	else if((PinNum>=8)&&(PinNum<=15))
 1da:	98 ef       	ldi	r25, 0xF8	; 248
 1dc:	98 0f       	add	r25, r24
 1de:	98 30       	cpi	r25, 0x08	; 8
 1e0:	f0 f4       	brcc	.+60     	; 0x21e <DIO_SetPinDirection+0x82>
	{
		if(PinDirection==0)
 1e2:	61 11       	cpse	r22, r1
 1e4:	0e c0       	rjmp	.+28     	; 0x202 <DIO_SetPinDirection+0x66>
		{
			clrbit(DDRB,(PinNum-8));
 1e6:	47 b3       	in	r20, 0x17	; 23
 1e8:	21 e0       	ldi	r18, 0x01	; 1
 1ea:	30 e0       	ldi	r19, 0x00	; 0
 1ec:	b9 01       	movw	r22, r18
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <DIO_SetPinDirection+0x58>
 1f0:	66 0f       	add	r22, r22
 1f2:	77 1f       	adc	r23, r23
 1f4:	9a 95       	dec	r25
 1f6:	e2 f7       	brpl	.-8      	; 0x1f0 <DIO_SetPinDirection+0x54>
 1f8:	cb 01       	movw	r24, r22
 1fa:	80 95       	com	r24
 1fc:	84 23       	and	r24, r20
 1fe:	87 bb       	out	0x17, r24	; 23
 200:	08 95       	ret
		}
		else
		{
			setbit(DDRB,(PinNum-8));
 202:	47 b3       	in	r20, 0x17	; 23
 204:	88 50       	subi	r24, 0x08	; 8
 206:	21 e0       	ldi	r18, 0x01	; 1
 208:	30 e0       	ldi	r19, 0x00	; 0
 20a:	b9 01       	movw	r22, r18
 20c:	02 c0       	rjmp	.+4      	; 0x212 <DIO_SetPinDirection+0x76>
 20e:	66 0f       	add	r22, r22
 210:	77 1f       	adc	r23, r23
 212:	8a 95       	dec	r24
 214:	e2 f7       	brpl	.-8      	; 0x20e <DIO_SetPinDirection+0x72>
 216:	cb 01       	movw	r24, r22
 218:	84 2b       	or	r24, r20
 21a:	87 bb       	out	0x17, r24	; 23
 21c:	08 95       	ret
		}
	}
	else if((PinNum>=16)&&(PinNum<=23))
 21e:	90 ef       	ldi	r25, 0xF0	; 240
 220:	98 0f       	add	r25, r24
 222:	98 30       	cpi	r25, 0x08	; 8
 224:	f0 f4       	brcc	.+60     	; 0x262 <DIO_SetPinDirection+0xc6>
	{
		if(PinDirection==0)
 226:	61 11       	cpse	r22, r1
 228:	0e c0       	rjmp	.+28     	; 0x246 <DIO_SetPinDirection+0xaa>
		{
			clrbit(DDRC,(PinNum-16));
 22a:	44 b3       	in	r20, 0x14	; 20
 22c:	21 e0       	ldi	r18, 0x01	; 1
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	b9 01       	movw	r22, r18
 232:	02 c0       	rjmp	.+4      	; 0x238 <DIO_SetPinDirection+0x9c>
 234:	66 0f       	add	r22, r22
 236:	77 1f       	adc	r23, r23
 238:	9a 95       	dec	r25
 23a:	e2 f7       	brpl	.-8      	; 0x234 <DIO_SetPinDirection+0x98>
 23c:	cb 01       	movw	r24, r22
 23e:	80 95       	com	r24
 240:	84 23       	and	r24, r20
 242:	84 bb       	out	0x14, r24	; 20
 244:	08 95       	ret
		}
		else
		{
			setbit(DDRC,(PinNum-16));
 246:	44 b3       	in	r20, 0x14	; 20
 248:	80 51       	subi	r24, 0x10	; 16
 24a:	21 e0       	ldi	r18, 0x01	; 1
 24c:	30 e0       	ldi	r19, 0x00	; 0
 24e:	b9 01       	movw	r22, r18
 250:	02 c0       	rjmp	.+4      	; 0x256 <DIO_SetPinDirection+0xba>
 252:	66 0f       	add	r22, r22
 254:	77 1f       	adc	r23, r23
 256:	8a 95       	dec	r24
 258:	e2 f7       	brpl	.-8      	; 0x252 <DIO_SetPinDirection+0xb6>
 25a:	cb 01       	movw	r24, r22
 25c:	84 2b       	or	r24, r20
 25e:	84 bb       	out	0x14, r24	; 20
 260:	08 95       	ret
		}
	}
	else if((PinNum>=24)&&((PinNum<=31)))
 262:	98 ee       	ldi	r25, 0xE8	; 232
 264:	98 0f       	add	r25, r24
 266:	98 30       	cpi	r25, 0x08	; 8
 268:	e8 f4       	brcc	.+58     	; 0x2a4 <DIO_SetPinDirection+0x108>
	{
		if(PinDirection==0)
 26a:	61 11       	cpse	r22, r1
 26c:	0e c0       	rjmp	.+28     	; 0x28a <DIO_SetPinDirection+0xee>
		{
			clrbit(DDRD,(PinNum-24));
 26e:	41 b3       	in	r20, 0x11	; 17
 270:	21 e0       	ldi	r18, 0x01	; 1
 272:	30 e0       	ldi	r19, 0x00	; 0
 274:	b9 01       	movw	r22, r18
 276:	02 c0       	rjmp	.+4      	; 0x27c <DIO_SetPinDirection+0xe0>
 278:	66 0f       	add	r22, r22
 27a:	77 1f       	adc	r23, r23
 27c:	9a 95       	dec	r25
 27e:	e2 f7       	brpl	.-8      	; 0x278 <DIO_SetPinDirection+0xdc>
 280:	cb 01       	movw	r24, r22
 282:	80 95       	com	r24
 284:	84 23       	and	r24, r20
 286:	81 bb       	out	0x11, r24	; 17
 288:	08 95       	ret
		}
		else
		{
			setbit(DDRD,(PinNum-24));
 28a:	41 b3       	in	r20, 0x11	; 17
 28c:	88 51       	subi	r24, 0x18	; 24
 28e:	21 e0       	ldi	r18, 0x01	; 1
 290:	30 e0       	ldi	r19, 0x00	; 0
 292:	b9 01       	movw	r22, r18
 294:	02 c0       	rjmp	.+4      	; 0x29a <DIO_SetPinDirection+0xfe>
 296:	66 0f       	add	r22, r22
 298:	77 1f       	adc	r23, r23
 29a:	8a 95       	dec	r24
 29c:	e2 f7       	brpl	.-8      	; 0x296 <DIO_SetPinDirection+0xfa>
 29e:	cb 01       	movw	r24, r22
 2a0:	84 2b       	or	r24, r20
 2a2:	81 bb       	out	0x11, r24	; 17
 2a4:	08 95       	ret

000002a6 <ESP_WIFI_Init>:
 *
 * Return		 : void
 **************************************************************************/
void ESP_WIFI_Init(void)
{
	UART_Write_String("AT+CWMODE=2");
 2a6:	86 e6       	ldi	r24, 0x66	; 102
 2a8:	90 e0       	ldi	r25, 0x00	; 0
 2aa:	0e 94 75 03 	call	0x6ea	; 0x6ea <UART_Write_String>
	UART_Write_Byte(0xD);
 2ae:	8d e0       	ldi	r24, 0x0D	; 13
 2b0:	0e 94 71 03 	call	0x6e2	; 0x6e2 <UART_Write_Byte>
	UART_Write_Byte(0xA);
 2b4:	8a e0       	ldi	r24, 0x0A	; 10
 2b6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <UART_Write_Byte>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2ba:	2f ef       	ldi	r18, 0xFF	; 255
 2bc:	89 e6       	ldi	r24, 0x69	; 105
 2be:	98 e1       	ldi	r25, 0x18	; 24
 2c0:	21 50       	subi	r18, 0x01	; 1
 2c2:	80 40       	sbci	r24, 0x00	; 0
 2c4:	90 40       	sbci	r25, 0x00	; 0
 2c6:	e1 f7       	brne	.-8      	; 0x2c0 <ESP_WIFI_Init+0x1a>
 2c8:	00 c0       	rjmp	.+0      	; 0x2ca <ESP_WIFI_Init+0x24>
 2ca:	00 00       	nop
	_delay_ms(1000);
	UART_Write_String("AT+CIPMUX=1");
 2cc:	82 e7       	ldi	r24, 0x72	; 114
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	0e 94 75 03 	call	0x6ea	; 0x6ea <UART_Write_String>
	UART_Write_Byte(0xD);
 2d4:	8d e0       	ldi	r24, 0x0D	; 13
 2d6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <UART_Write_Byte>
	UART_Write_Byte(0xA);
 2da:	8a e0       	ldi	r24, 0x0A	; 10
 2dc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <UART_Write_Byte>
 2e0:	2f ef       	ldi	r18, 0xFF	; 255
 2e2:	89 e6       	ldi	r24, 0x69	; 105
 2e4:	98 e1       	ldi	r25, 0x18	; 24
 2e6:	21 50       	subi	r18, 0x01	; 1
 2e8:	80 40       	sbci	r24, 0x00	; 0
 2ea:	90 40       	sbci	r25, 0x00	; 0
 2ec:	e1 f7       	brne	.-8      	; 0x2e6 <ESP_WIFI_Init+0x40>
 2ee:	00 c0       	rjmp	.+0      	; 0x2f0 <ESP_WIFI_Init+0x4a>
 2f0:	00 00       	nop
	_delay_ms(1000);
	UART_Write_String("AT+CIPSERVER=1,2222");
 2f2:	8e e7       	ldi	r24, 0x7E	; 126
 2f4:	90 e0       	ldi	r25, 0x00	; 0
 2f6:	0e 94 75 03 	call	0x6ea	; 0x6ea <UART_Write_String>
	UART_Write_Byte(0xD);
 2fa:	8d e0       	ldi	r24, 0x0D	; 13
 2fc:	0e 94 71 03 	call	0x6e2	; 0x6e2 <UART_Write_Byte>
	UART_Write_Byte(0xA);
 300:	8a e0       	ldi	r24, 0x0A	; 10
 302:	0e 94 71 03 	call	0x6e2	; 0x6e2 <UART_Write_Byte>
 306:	2f ef       	ldi	r18, 0xFF	; 255
 308:	89 e6       	ldi	r24, 0x69	; 105
 30a:	98 e1       	ldi	r25, 0x18	; 24
 30c:	21 50       	subi	r18, 0x01	; 1
 30e:	80 40       	sbci	r24, 0x00	; 0
 310:	90 40       	sbci	r25, 0x00	; 0
 312:	e1 f7       	brne	.-8      	; 0x30c <ESP_WIFI_Init+0x66>
 314:	00 c0       	rjmp	.+0      	; 0x316 <ESP_WIFI_Init+0x70>
 316:	00 00       	nop
	_delay_ms(1000);
	UART_Write_String("AT+CWSAP=\"BOBO123\",\"EKRAM123\",1,3");
 318:	82 e9       	ldi	r24, 0x92	; 146
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 75 03 	call	0x6ea	; 0x6ea <UART_Write_String>
	UART_Write_Byte(0xD);
 320:	8d e0       	ldi	r24, 0x0D	; 13
 322:	0e 94 71 03 	call	0x6e2	; 0x6e2 <UART_Write_Byte>
	UART_Write_Byte(0xA);
 326:	8a e0       	ldi	r24, 0x0A	; 10
 328:	0e 94 71 03 	call	0x6e2	; 0x6e2 <UART_Write_Byte>
 32c:	2f ef       	ldi	r18, 0xFF	; 255
 32e:	89 e6       	ldi	r24, 0x69	; 105
 330:	98 e1       	ldi	r25, 0x18	; 24
 332:	21 50       	subi	r18, 0x01	; 1
 334:	80 40       	sbci	r24, 0x00	; 0
 336:	90 40       	sbci	r25, 0x00	; 0
 338:	e1 f7       	brne	.-8      	; 0x332 <ESP_WIFI_Init+0x8c>
 33a:	00 c0       	rjmp	.+0      	; 0x33c <ESP_WIFI_Init+0x96>
 33c:	00 00       	nop
 33e:	08 95       	ret

00000340 <CallBack_Function>:
 *
 * Return		 : void
 **************************************************************************/
void CallBack_Function (uint8_t data)
{
	Reading_g = data;
 340:	80 93 b6 00 	sts	0x00B6, r24	; 0x8000b6 <Reading_g>
 344:	08 95       	ret

00000346 <main>:
}
int main(void)
{
    /* Replace with your application code */
	/*Inilializing UART,MOTOR,ESP_WIFI and PWM*/
	UART_Init(9600,CallBack_Function);
 346:	40 ea       	ldi	r20, 0xA0	; 160
 348:	51 e0       	ldi	r21, 0x01	; 1
 34a:	60 e8       	ldi	r22, 0x80	; 128
 34c:	75 e2       	ldi	r23, 0x25	; 37
 34e:	80 e0       	ldi	r24, 0x00	; 0
 350:	90 e0       	ldi	r25, 0x00	; 0
 352:	0e 94 41 03 	call	0x682	; 0x682 <UART_Init>
	motor_init();
 356:	0e 94 fd 01 	call	0x3fa	; 0x3fa <motor_init>
	ESP_WIFI_Init();
 35a:	0e 94 53 01 	call	0x2a6	; 0x2a6 <ESP_WIFI_Init>
	pwm_init();
 35e:	0e 94 63 02 	call	0x4c6	; 0x4c6 <pwm_init>
	/*Enabling global interrupts*/
	sei();
 362:	78 94       	sei
    while (1) 
    {
		if(Reading_g=='w')
 364:	80 91 b6 00 	lds	r24, 0x00B6	; 0x8000b6 <Reading_g>
 368:	87 37       	cpi	r24, 0x77	; 119
 36a:	71 f4       	brne	.+28     	; 0x388 <main+0x42>
		{
			motor_forward();
 36c:	0e 94 0e 02 	call	0x41c	; 0x41c <motor_forward>
			pwm_write(100);
 370:	84 e6       	ldi	r24, 0x64	; 100
 372:	0e 94 79 02 	call	0x4f2	; 0x4f2 <pwm_write>
			DIO_SetPinDirection(PIN12,OUTPUT);
 376:	61 e0       	ldi	r22, 0x01	; 1
 378:	8c e0       	ldi	r24, 0x0C	; 12
 37a:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_SetPinDirection>
			DIO_WritePin(PIN12,HIGH);
 37e:	61 e0       	ldi	r22, 0x01	; 1
 380:	8c e0       	ldi	r24, 0x0C	; 12
 382:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 386:	ee cf       	rjmp	.-36     	; 0x364 <main+0x1e>
        }
		else if(Reading_g=='s')
 388:	83 37       	cpi	r24, 0x73	; 115
 38a:	71 f4       	brne	.+28     	; 0x3a8 <main+0x62>
		{
			pwm_write(100);
 38c:	84 e6       	ldi	r24, 0x64	; 100
 38e:	0e 94 79 02 	call	0x4f2	; 0x4f2 <pwm_write>
			DIO_SetPinDirection(PIN13,OUTPUT);
 392:	61 e0       	ldi	r22, 0x01	; 1
 394:	8d e0       	ldi	r24, 0x0D	; 13
 396:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_SetPinDirection>
			DIO_WritePin(PIN13,HIGH);
 39a:	61 e0       	ldi	r22, 0x01	; 1
 39c:	8d e0       	ldi	r24, 0x0D	; 13
 39e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
			motor_backward();
 3a2:	0e 94 1f 02 	call	0x43e	; 0x43e <motor_backward>
 3a6:	de cf       	rjmp	.-68     	; 0x364 <main+0x1e>
		}
		else if(Reading_g=='d')
 3a8:	84 36       	cpi	r24, 0x64	; 100
 3aa:	69 f4       	brne	.+26     	; 0x3c6 <main+0x80>
		{
			pwm_write(100);
 3ac:	0e 94 79 02 	call	0x4f2	; 0x4f2 <pwm_write>
			motor_right();
 3b0:	0e 94 30 02 	call	0x460	; 0x460 <motor_right>
			DIO_SetPinDirection(PIN14,OUTPUT);
 3b4:	61 e0       	ldi	r22, 0x01	; 1
 3b6:	8e e0       	ldi	r24, 0x0E	; 14
 3b8:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_SetPinDirection>
			DIO_WritePin(PIN14,HIGH);
 3bc:	61 e0       	ldi	r22, 0x01	; 1
 3be:	8e e0       	ldi	r24, 0x0E	; 14
 3c0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 3c4:	cf cf       	rjmp	.-98     	; 0x364 <main+0x1e>
		}
		else if(Reading_g=='a')
 3c6:	81 36       	cpi	r24, 0x61	; 97
 3c8:	91 f4       	brne	.+36     	; 0x3ee <main+0xa8>
		{
			pwm_write(100);
 3ca:	84 e6       	ldi	r24, 0x64	; 100
 3cc:	0e 94 79 02 	call	0x4f2	; 0x4f2 <pwm_write>
			motor_left();
 3d0:	0e 94 41 02 	call	0x482	; 0x482 <motor_left>
			DIO_WritePin(PIN14,LOW);
 3d4:	60 e0       	ldi	r22, 0x00	; 0
 3d6:	8e e0       	ldi	r24, 0x0E	; 14
 3d8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
			DIO_WritePin(PIN13,LOW);
 3dc:	60 e0       	ldi	r22, 0x00	; 0
 3de:	8d e0       	ldi	r24, 0x0D	; 13
 3e0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
			DIO_WritePin(PIN12,LOW);
 3e4:	60 e0       	ldi	r22, 0x00	; 0
 3e6:	8c e0       	ldi	r24, 0x0C	; 12
 3e8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 3ec:	bb cf       	rjmp	.-138    	; 0x364 <main+0x1e>
		}
		else if(Reading_g=='q')
 3ee:	81 37       	cpi	r24, 0x71	; 113
 3f0:	09 f0       	breq	.+2      	; 0x3f4 <main+0xae>
 3f2:	b8 cf       	rjmp	.-144    	; 0x364 <main+0x1e>
		{
		    motor_stop();	
 3f4:	0e 94 52 02 	call	0x4a4	; 0x4a4 <motor_stop>
 3f8:	b5 cf       	rjmp	.-150    	; 0x364 <main+0x1e>

000003fa <motor_init>:
#include "motor.h"
#include "DIO.h"

void motor_init(){

    DIO_SetPinDirection( PIN30 , OUTPUT ); //motor2 A dir
 3fa:	61 e0       	ldi	r22, 0x01	; 1
 3fc:	8e e1       	ldi	r24, 0x1E	; 30
 3fe:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_SetPinDirection>
    DIO_SetPinDirection( PIN31 , OUTPUT ); //motor2 B dir
 402:	61 e0       	ldi	r22, 0x01	; 1
 404:	8f e1       	ldi	r24, 0x1F	; 31
 406:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_SetPinDirection>

    DIO_SetPinDirection( PIN26 , OUTPUT ); //motor1 A dir
 40a:	61 e0       	ldi	r22, 0x01	; 1
 40c:	8a e1       	ldi	r24, 0x1A	; 26
 40e:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_SetPinDirection>
    DIO_SetPinDirection( PIN27 , OUTPUT ); //motor1 B dir
 412:	61 e0       	ldi	r22, 0x01	; 1
 414:	8b e1       	ldi	r24, 0x1B	; 27
 416:	0e 94 ce 00 	call	0x19c	; 0x19c <DIO_SetPinDirection>
 41a:	08 95       	ret

0000041c <motor_forward>:
   // DIO_SetPinDirection( PIN28 , OUTPUT ); //motor2 en

}

void motor_forward(){
    DIO_WritePin(PIN30 , HIGH);//motor2 A
 41c:	61 e0       	ldi	r22, 0x01	; 1
 41e:	8e e1       	ldi	r24, 0x1E	; 30
 420:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
    DIO_WritePin(PIN31 , LOW);//motor2 B 
 424:	60 e0       	ldi	r22, 0x00	; 0
 426:	8f e1       	ldi	r24, 0x1F	; 31
 428:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
	
    DIO_WritePin(PIN26 , HIGH);//motor1 A
 42c:	61 e0       	ldi	r22, 0x01	; 1
 42e:	8a e1       	ldi	r24, 0x1A	; 26
 430:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
    DIO_WritePin(PIN27 , LOW);//motor1 B
 434:	60 e0       	ldi	r22, 0x00	; 0
 436:	8b e1       	ldi	r24, 0x1B	; 27
 438:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 43c:	08 95       	ret

0000043e <motor_backward>:
}

void motor_backward(){

    DIO_WritePin(PIN30 , LOW);//motor2 A
 43e:	60 e0       	ldi	r22, 0x00	; 0
 440:	8e e1       	ldi	r24, 0x1E	; 30
 442:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
    DIO_WritePin(PIN31 , HIGH);//motor2 B 
 446:	61 e0       	ldi	r22, 0x01	; 1
 448:	8f e1       	ldi	r24, 0x1F	; 31
 44a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
    DIO_WritePin(PIN26 , LOW);//motor1 A
 44e:	60 e0       	ldi	r22, 0x00	; 0
 450:	8a e1       	ldi	r24, 0x1A	; 26
 452:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
    DIO_WritePin(PIN27 , HIGH);//motor1 B
 456:	61 e0       	ldi	r22, 0x01	; 1
 458:	8b e1       	ldi	r24, 0x1B	; 27
 45a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 45e:	08 95       	ret

00000460 <motor_right>:
}

void motor_right(){
    DIO_WritePin(PIN30 , HIGH);//motor2 A
 460:	61 e0       	ldi	r22, 0x01	; 1
 462:	8e e1       	ldi	r24, 0x1E	; 30
 464:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
    DIO_WritePin(PIN31 , LOW);//motor2 B 
 468:	60 e0       	ldi	r22, 0x00	; 0
 46a:	8f e1       	ldi	r24, 0x1F	; 31
 46c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
    DIO_WritePin(PIN26 , LOW);//motor1 A
 470:	60 e0       	ldi	r22, 0x00	; 0
 472:	8a e1       	ldi	r24, 0x1A	; 26
 474:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
    DIO_WritePin(PIN27 , HIGH);//motor1 B
 478:	61 e0       	ldi	r22, 0x01	; 1
 47a:	8b e1       	ldi	r24, 0x1B	; 27
 47c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 480:	08 95       	ret

00000482 <motor_left>:
}

void motor_left(){

    DIO_WritePin(PIN30 , LOW);//motor2 A
 482:	60 e0       	ldi	r22, 0x00	; 0
 484:	8e e1       	ldi	r24, 0x1E	; 30
 486:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
    DIO_WritePin(PIN31 , HIGH);//motor2 B 
 48a:	61 e0       	ldi	r22, 0x01	; 1
 48c:	8f e1       	ldi	r24, 0x1F	; 31
 48e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
    DIO_WritePin(PIN26 , HIGH);//motor1 A
 492:	61 e0       	ldi	r22, 0x01	; 1
 494:	8a e1       	ldi	r24, 0x1A	; 26
 496:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
    DIO_WritePin(PIN27 , LOW);//motor1 B
 49a:	60 e0       	ldi	r22, 0x00	; 0
 49c:	8b e1       	ldi	r24, 0x1B	; 27
 49e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 4a2:	08 95       	ret

000004a4 <motor_stop>:
} 

void motor_stop(){

    DIO_WritePin(PIN30 , LOW);//motor2 A
 4a4:	60 e0       	ldi	r22, 0x00	; 0
 4a6:	8e e1       	ldi	r24, 0x1E	; 30
 4a8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
    DIO_WritePin(PIN31 , LOW);//motor2 B 
 4ac:	60 e0       	ldi	r22, 0x00	; 0
 4ae:	8f e1       	ldi	r24, 0x1F	; 31
 4b0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
    DIO_WritePin(PIN26 , LOW);//motor1 A
 4b4:	60 e0       	ldi	r22, 0x00	; 0
 4b6:	8a e1       	ldi	r24, 0x1A	; 26
 4b8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
    DIO_WritePin(PIN27 , LOW);//motor1 B
 4bc:	60 e0       	ldi	r22, 0x00	; 0
 4be:	8b e1       	ldi	r24, 0x1B	; 27
 4c0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_WritePin>
 4c4:	08 95       	ret

000004c6 <pwm_init>:
#include "Timer.h"

uint8 pwm_inv =  Non_inverted ; 
void pwm_init(void) {
	
	timer0_init();
 4c6:	0e 94 88 02 	call	0x510	; 0x510 <timer0_init>
	 if (pwm_inv == Non_inverted) {setbit(TCCR0,COM00); setbit(TCCR0,COM01);}
 4ca:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 4ce:	81 30       	cpi	r24, 0x01	; 1
 4d0:	39 f4       	brne	.+14     	; 0x4e0 <pwm_init+0x1a>
 4d2:	83 b7       	in	r24, 0x33	; 51
 4d4:	80 61       	ori	r24, 0x10	; 16
 4d6:	83 bf       	out	0x33, r24	; 51
 4d8:	83 b7       	in	r24, 0x33	; 51
 4da:	80 62       	ori	r24, 0x20	; 32
 4dc:	83 bf       	out	0x33, r24	; 51
 4de:	08 95       	ret
else if (pwm_inv == Inverted) {clrbit(TCCR0,COM00); setbit(TCCR0,COM01);}
 4e0:	81 11       	cpse	r24, r1
 4e2:	06 c0       	rjmp	.+12     	; 0x4f0 <pwm_init+0x2a>
 4e4:	83 b7       	in	r24, 0x33	; 51
 4e6:	8f 7e       	andi	r24, 0xEF	; 239
 4e8:	83 bf       	out	0x33, r24	; 51
 4ea:	83 b7       	in	r24, 0x33	; 51
 4ec:	80 62       	ori	r24, 0x20	; 32
 4ee:	83 bf       	out	0x33, r24	; 51
 4f0:	08 95       	ret

000004f2 <pwm_write>:
}


void pwm_write(uint8 speed) {
	
	OCR0 = ((100 - speed )*255)/100 ; 
 4f2:	64 e6       	ldi	r22, 0x64	; 100
 4f4:	70 e0       	ldi	r23, 0x00	; 0
 4f6:	9b 01       	movw	r18, r22
 4f8:	28 1b       	sub	r18, r24
 4fa:	31 09       	sbc	r19, r1
 4fc:	4f ef       	ldi	r20, 0xFF	; 255
 4fe:	42 9f       	mul	r20, r18
 500:	c0 01       	movw	r24, r0
 502:	43 9f       	mul	r20, r19
 504:	90 0d       	add	r25, r0
 506:	11 24       	eor	r1, r1
 508:	0e 94 ac 03 	call	0x758	; 0x758 <__divmodhi4>
 50c:	6c bf       	out	0x3c, r22	; 60
 50e:	08 95       	ret

00000510 <timer0_init>:

#include "Timer.h"
extern struct cnfg_type timer_cnfg;

void timer0_init(void){
	OCR0  = 0x00;
 510:	1c be       	out	0x3c, r1	; 60
	TCCR0 = 0x00;
 512:	13 be       	out	0x33, r1	; 51
	TCNT0 = 0x00; 
 514:	12 be       	out	0x32, r1	; 50
	
	if (timer_cnfg.mode== Normal_mode){	
 516:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <timer_cnfg>
 51a:	81 11       	cpse	r24, r1
 51c:	0d c0       	rjmp	.+26     	; 0x538 <timer0_init+0x28>
		clrbit(TCCR0,WGM00); clrbit(TCCR0,WGM01); clrbit(TCCR0,COM00); clrbit(TCCR0,COM01);		
 51e:	83 b7       	in	r24, 0x33	; 51
 520:	8f 7b       	andi	r24, 0xBF	; 191
 522:	83 bf       	out	0x33, r24	; 51
 524:	83 b7       	in	r24, 0x33	; 51
 526:	87 7f       	andi	r24, 0xF7	; 247
 528:	83 bf       	out	0x33, r24	; 51
 52a:	83 b7       	in	r24, 0x33	; 51
 52c:	8f 7e       	andi	r24, 0xEF	; 239
 52e:	83 bf       	out	0x33, r24	; 51
 530:	83 b7       	in	r24, 0x33	; 51
 532:	8f 7d       	andi	r24, 0xDF	; 223
 534:	83 bf       	out	0x33, r24	; 51
 536:	26 c0       	rjmp	.+76     	; 0x584 <timer0_init+0x74>
	}
	else if (timer_cnfg.mode== PWM_PhaseCorrect) {
 538:	81 30       	cpi	r24, 0x01	; 1
 53a:	39 f4       	brne	.+14     	; 0x54a <timer0_init+0x3a>
		setbit(TCCR0,WGM00); clrbit(TCCR0,WGM01); //setbit(TCCR0,COM00); setbit(TCCR0,COM01);
 53c:	83 b7       	in	r24, 0x33	; 51
 53e:	80 64       	ori	r24, 0x40	; 64
 540:	83 bf       	out	0x33, r24	; 51
 542:	83 b7       	in	r24, 0x33	; 51
 544:	87 7f       	andi	r24, 0xF7	; 247
 546:	83 bf       	out	0x33, r24	; 51
 548:	1d c0       	rjmp	.+58     	; 0x584 <timer0_init+0x74>
	}
	else if (timer_cnfg.mode== CTC) {
 54a:	82 30       	cpi	r24, 0x02	; 2
 54c:	69 f4       	brne	.+26     	; 0x568 <timer0_init+0x58>
		clrbit(TCCR0,WGM00); setbit(TCCR0,WGM01); setbit(TCCR0,COM00); clrbit(TCCR0,COM01);
 54e:	83 b7       	in	r24, 0x33	; 51
 550:	8f 7b       	andi	r24, 0xBF	; 191
 552:	83 bf       	out	0x33, r24	; 51
 554:	83 b7       	in	r24, 0x33	; 51
 556:	88 60       	ori	r24, 0x08	; 8
 558:	83 bf       	out	0x33, r24	; 51
 55a:	83 b7       	in	r24, 0x33	; 51
 55c:	80 61       	ori	r24, 0x10	; 16
 55e:	83 bf       	out	0x33, r24	; 51
 560:	83 b7       	in	r24, 0x33	; 51
 562:	8f 7d       	andi	r24, 0xDF	; 223
 564:	83 bf       	out	0x33, r24	; 51
 566:	0e c0       	rjmp	.+28     	; 0x584 <timer0_init+0x74>
	}
	else if (timer_cnfg.mode== Fast_PWM) {
 568:	83 30       	cpi	r24, 0x03	; 3
 56a:	61 f4       	brne	.+24     	; 0x584 <timer0_init+0x74>
        setbit(TCCR0,WGM00); setbit(TCCR0,WGM01); setbit(TCCR0,COM00); setbit(TCCR0,COM01);			
 56c:	83 b7       	in	r24, 0x33	; 51
 56e:	80 64       	ori	r24, 0x40	; 64
 570:	83 bf       	out	0x33, r24	; 51
 572:	83 b7       	in	r24, 0x33	; 51
 574:	88 60       	ori	r24, 0x08	; 8
 576:	83 bf       	out	0x33, r24	; 51
 578:	83 b7       	in	r24, 0x33	; 51
 57a:	80 61       	ori	r24, 0x10	; 16
 57c:	83 bf       	out	0x33, r24	; 51
 57e:	83 b7       	in	r24, 0x33	; 51
 580:	80 62       	ori	r24, 0x20	; 32
 582:	83 bf       	out	0x33, r24	; 51
	}
	
     if (timer_cnfg.prescaler== no_prescaler ) {setbit(TCCR0,CS00); clrbit(TCCR0,CS01); clrbit(TCCR0,CS02);}
 584:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <timer_cnfg+0x1>
 588:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <timer_cnfg+0x2>
 58c:	00 97       	sbiw	r24, 0x00	; 0
 58e:	51 f4       	brne	.+20     	; 0x5a4 <timer0_init+0x94>
 590:	83 b7       	in	r24, 0x33	; 51
 592:	81 60       	ori	r24, 0x01	; 1
 594:	83 bf       	out	0x33, r24	; 51
 596:	83 b7       	in	r24, 0x33	; 51
 598:	8d 7f       	andi	r24, 0xFD	; 253
 59a:	83 bf       	out	0x33, r24	; 51
 59c:	83 b7       	in	r24, 0x33	; 51
 59e:	8b 7f       	andi	r24, 0xFB	; 251
 5a0:	83 bf       	out	0x33, r24	; 51
 5a2:	4e c0       	rjmp	.+156    	; 0x640 <timer0_init+0x130>
else if (timer_cnfg.prescaler== 8 )    {clrbit(TCCR0,CS00); setbit(TCCR0,CS01); clrbit(TCCR0,CS02);}
 5a4:	88 30       	cpi	r24, 0x08	; 8
 5a6:	91 05       	cpc	r25, r1
 5a8:	51 f4       	brne	.+20     	; 0x5be <timer0_init+0xae>
 5aa:	83 b7       	in	r24, 0x33	; 51
 5ac:	8e 7f       	andi	r24, 0xFE	; 254
 5ae:	83 bf       	out	0x33, r24	; 51
 5b0:	83 b7       	in	r24, 0x33	; 51
 5b2:	82 60       	ori	r24, 0x02	; 2
 5b4:	83 bf       	out	0x33, r24	; 51
 5b6:	83 b7       	in	r24, 0x33	; 51
 5b8:	8b 7f       	andi	r24, 0xFB	; 251
 5ba:	83 bf       	out	0x33, r24	; 51
 5bc:	41 c0       	rjmp	.+130    	; 0x640 <timer0_init+0x130>
else if (timer_cnfg.prescaler== 64 )   {setbit(TCCR0,CS00); setbit(TCCR0,CS01); clrbit(TCCR0,CS02);}
 5be:	80 34       	cpi	r24, 0x40	; 64
 5c0:	91 05       	cpc	r25, r1
 5c2:	51 f4       	brne	.+20     	; 0x5d8 <timer0_init+0xc8>
 5c4:	83 b7       	in	r24, 0x33	; 51
 5c6:	81 60       	ori	r24, 0x01	; 1
 5c8:	83 bf       	out	0x33, r24	; 51
 5ca:	83 b7       	in	r24, 0x33	; 51
 5cc:	82 60       	ori	r24, 0x02	; 2
 5ce:	83 bf       	out	0x33, r24	; 51
 5d0:	83 b7       	in	r24, 0x33	; 51
 5d2:	8b 7f       	andi	r24, 0xFB	; 251
 5d4:	83 bf       	out	0x33, r24	; 51
 5d6:	34 c0       	rjmp	.+104    	; 0x640 <timer0_init+0x130>
else if (timer_cnfg.prescaler== 256 )  {clrbit(TCCR0,CS00); clrbit(TCCR0,CS01); setbit(TCCR0,CS02);}
 5d8:	81 15       	cp	r24, r1
 5da:	21 e0       	ldi	r18, 0x01	; 1
 5dc:	92 07       	cpc	r25, r18
 5de:	51 f4       	brne	.+20     	; 0x5f4 <timer0_init+0xe4>
 5e0:	83 b7       	in	r24, 0x33	; 51
 5e2:	8e 7f       	andi	r24, 0xFE	; 254
 5e4:	83 bf       	out	0x33, r24	; 51
 5e6:	83 b7       	in	r24, 0x33	; 51
 5e8:	8d 7f       	andi	r24, 0xFD	; 253
 5ea:	83 bf       	out	0x33, r24	; 51
 5ec:	83 b7       	in	r24, 0x33	; 51
 5ee:	84 60       	ori	r24, 0x04	; 4
 5f0:	83 bf       	out	0x33, r24	; 51
 5f2:	26 c0       	rjmp	.+76     	; 0x640 <timer0_init+0x130>
else if (timer_cnfg.prescaler== 1024 ) {setbit(TCCR0,CS00); clrbit(TCCR0,CS01); setbit(TCCR0,CS02);}
 5f4:	81 15       	cp	r24, r1
 5f6:	24 e0       	ldi	r18, 0x04	; 4
 5f8:	92 07       	cpc	r25, r18
 5fa:	51 f4       	brne	.+20     	; 0x610 <timer0_init+0x100>
 5fc:	83 b7       	in	r24, 0x33	; 51
 5fe:	81 60       	ori	r24, 0x01	; 1
 600:	83 bf       	out	0x33, r24	; 51
 602:	83 b7       	in	r24, 0x33	; 51
 604:	8d 7f       	andi	r24, 0xFD	; 253
 606:	83 bf       	out	0x33, r24	; 51
 608:	83 b7       	in	r24, 0x33	; 51
 60a:	84 60       	ori	r24, 0x04	; 4
 60c:	83 bf       	out	0x33, r24	; 51
 60e:	18 c0       	rjmp	.+48     	; 0x640 <timer0_init+0x130>
else if (timer_cnfg.prescaler== XFE )  {clrbit(TCCR0,CS00); setbit(TCCR0,CS01); setbit(TCCR0,CS02);}
 610:	82 30       	cpi	r24, 0x02	; 2
 612:	91 05       	cpc	r25, r1
 614:	51 f4       	brne	.+20     	; 0x62a <timer0_init+0x11a>
 616:	83 b7       	in	r24, 0x33	; 51
 618:	8e 7f       	andi	r24, 0xFE	; 254
 61a:	83 bf       	out	0x33, r24	; 51
 61c:	83 b7       	in	r24, 0x33	; 51
 61e:	82 60       	ori	r24, 0x02	; 2
 620:	83 bf       	out	0x33, r24	; 51
 622:	83 b7       	in	r24, 0x33	; 51
 624:	84 60       	ori	r24, 0x04	; 4
 626:	83 bf       	out	0x33, r24	; 51
 628:	0b c0       	rjmp	.+22     	; 0x640 <timer0_init+0x130>
else if (timer_cnfg.prescaler== XRE )  {setbit(TCCR0,CS00); setbit(TCCR0,CS01); setbit(TCCR0,CS02);}
 62a:	03 97       	sbiw	r24, 0x03	; 3
 62c:	49 f4       	brne	.+18     	; 0x640 <timer0_init+0x130>
 62e:	83 b7       	in	r24, 0x33	; 51
 630:	81 60       	ori	r24, 0x01	; 1
 632:	83 bf       	out	0x33, r24	; 51
 634:	83 b7       	in	r24, 0x33	; 51
 636:	82 60       	ori	r24, 0x02	; 2
 638:	83 bf       	out	0x33, r24	; 51
 63a:	83 b7       	in	r24, 0x33	; 51
 63c:	84 60       	ori	r24, 0x04	; 4
 63e:	83 bf       	out	0x33, r24	; 51
	
	

	if      (timer_cnfg.CMI==Enabled)  { setbit(TIMSK,OCIE0); setbit(SREG,7); }
 640:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <timer_cnfg+0x3>
 644:	81 30       	cpi	r24, 0x01	; 1
 646:	39 f4       	brne	.+14     	; 0x656 <timer0_init+0x146>
 648:	89 b7       	in	r24, 0x39	; 57
 64a:	82 60       	ori	r24, 0x02	; 2
 64c:	89 bf       	out	0x39, r24	; 57
 64e:	8f b7       	in	r24, 0x3f	; 63
 650:	80 68       	ori	r24, 0x80	; 128
 652:	8f bf       	out	0x3f, r24	; 63
 654:	05 c0       	rjmp	.+10     	; 0x660 <timer0_init+0x150>
	else if (timer_cnfg.CMI==Disabled) { clrbit(TIMSK,OCIE0); }
 656:	81 11       	cpse	r24, r1
 658:	03 c0       	rjmp	.+6      	; 0x660 <timer0_init+0x150>
 65a:	89 b7       	in	r24, 0x39	; 57
 65c:	8d 7f       	andi	r24, 0xFD	; 253
 65e:	89 bf       	out	0x39, r24	; 57
		
    if      (timer_cnfg.OVI==Enabled)  { setbit(TIMSK,TOIE0);setbit(SREG,7); }
 660:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <timer_cnfg+0x4>
 664:	81 30       	cpi	r24, 0x01	; 1
 666:	39 f4       	brne	.+14     	; 0x676 <timer0_init+0x166>
 668:	89 b7       	in	r24, 0x39	; 57
 66a:	81 60       	ori	r24, 0x01	; 1
 66c:	89 bf       	out	0x39, r24	; 57
 66e:	8f b7       	in	r24, 0x3f	; 63
 670:	80 68       	ori	r24, 0x80	; 128
 672:	8f bf       	out	0x3f, r24	; 63
 674:	08 95       	ret
	else if (timer_cnfg.OVI==Disabled) { clrbit(TIMSK,TOIE0); }
 676:	81 11       	cpse	r24, r1
 678:	03 c0       	rjmp	.+6      	; 0x680 <timer0_init+0x170>
 67a:	89 b7       	in	r24, 0x39	; 57
 67c:	8e 7f       	andi	r24, 0xFE	; 254
 67e:	89 bf       	out	0x39, r24	; 57
 680:	08 95       	ret

00000682 <UART_Init>:

char UART_Receive_Byte(void)
{
	while ( !(UCSRA & (1<<RXC)) );
	return UDR;
}
 682:	cf 93       	push	r28
 684:	df 93       	push	r29
 686:	ea 01       	movw	r28, r20
 688:	dc 01       	movw	r26, r24
 68a:	cb 01       	movw	r24, r22
 68c:	88 0f       	add	r24, r24
 68e:	99 1f       	adc	r25, r25
 690:	aa 1f       	adc	r26, r26
 692:	bb 1f       	adc	r27, r27
 694:	88 0f       	add	r24, r24
 696:	99 1f       	adc	r25, r25
 698:	aa 1f       	adc	r26, r26
 69a:	bb 1f       	adc	r27, r27
 69c:	9c 01       	movw	r18, r24
 69e:	ad 01       	movw	r20, r26
 6a0:	22 0f       	add	r18, r18
 6a2:	33 1f       	adc	r19, r19
 6a4:	44 1f       	adc	r20, r20
 6a6:	55 1f       	adc	r21, r21
 6a8:	22 0f       	add	r18, r18
 6aa:	33 1f       	adc	r19, r19
 6ac:	44 1f       	adc	r20, r20
 6ae:	55 1f       	adc	r21, r21
 6b0:	60 e0       	ldi	r22, 0x00	; 0
 6b2:	72 e1       	ldi	r23, 0x12	; 18
 6b4:	8a e7       	ldi	r24, 0x7A	; 122
 6b6:	90 e0       	ldi	r25, 0x00	; 0
 6b8:	0e 94 c0 03 	call	0x780	; 0x780 <__udivmodsi4>
 6bc:	21 50       	subi	r18, 0x01	; 1
 6be:	31 09       	sbc	r19, r1
 6c0:	8a b1       	in	r24, 0x0a	; 10
 6c2:	88 61       	ori	r24, 0x18	; 24
 6c4:	8a b9       	out	0x0a, r24	; 10
 6c6:	86 e8       	ldi	r24, 0x86	; 134
 6c8:	80 bd       	out	0x20, r24	; 32
 6ca:	20 97       	sbiw	r28, 0x00	; 0
 6cc:	29 f0       	breq	.+10     	; 0x6d8 <UART_Init+0x56>
 6ce:	d0 93 b5 00 	sts	0x00B5, r29	; 0x8000b5 <__data_end+0x1>
 6d2:	c0 93 b4 00 	sts	0x00B4, r28	; 0x8000b4 <__data_end>
 6d6:	57 9a       	sbi	0x0a, 7	; 10
 6d8:	30 bd       	out	0x20, r19	; 32
 6da:	29 b9       	out	0x09, r18	; 9
 6dc:	df 91       	pop	r29
 6de:	cf 91       	pop	r28
 6e0:	08 95       	ret

000006e2 <UART_Write_Byte>:
 6e2:	5d 9b       	sbis	0x0b, 5	; 11
 6e4:	fe cf       	rjmp	.-4      	; 0x6e2 <UART_Write_Byte>
 6e6:	8c b9       	out	0x0c, r24	; 12
 6e8:	08 95       	ret

000006ea <UART_Write_String>:
 6ea:	cf 93       	push	r28
 6ec:	df 93       	push	r29
 6ee:	ec 01       	movw	r28, r24
 6f0:	88 81       	ld	r24, Y
 6f2:	88 23       	and	r24, r24
 6f4:	31 f0       	breq	.+12     	; 0x702 <UART_Write_String+0x18>
 6f6:	21 96       	adiw	r28, 0x01	; 1
 6f8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <UART_Write_Byte>
 6fc:	89 91       	ld	r24, Y+
 6fe:	81 11       	cpse	r24, r1
 700:	fb cf       	rjmp	.-10     	; 0x6f8 <UART_Write_String+0xe>
 702:	df 91       	pop	r29
 704:	cf 91       	pop	r28
 706:	08 95       	ret

00000708 <__vector_13>:



ISR(USART_RXC_vect)
{
 708:	1f 92       	push	r1
 70a:	0f 92       	push	r0
 70c:	0f b6       	in	r0, 0x3f	; 63
 70e:	0f 92       	push	r0
 710:	11 24       	eor	r1, r1
 712:	2f 93       	push	r18
 714:	3f 93       	push	r19
 716:	4f 93       	push	r20
 718:	5f 93       	push	r21
 71a:	6f 93       	push	r22
 71c:	7f 93       	push	r23
 71e:	8f 93       	push	r24
 720:	9f 93       	push	r25
 722:	af 93       	push	r26
 724:	bf 93       	push	r27
 726:	ef 93       	push	r30
 728:	ff 93       	push	r31
	UART_Rx_Callback(UDR);
 72a:	8c b1       	in	r24, 0x0c	; 12
 72c:	e0 91 b4 00 	lds	r30, 0x00B4	; 0x8000b4 <__data_end>
 730:	f0 91 b5 00 	lds	r31, 0x00B5	; 0x8000b5 <__data_end+0x1>
 734:	09 95       	icall
}
 736:	ff 91       	pop	r31
 738:	ef 91       	pop	r30
 73a:	bf 91       	pop	r27
 73c:	af 91       	pop	r26
 73e:	9f 91       	pop	r25
 740:	8f 91       	pop	r24
 742:	7f 91       	pop	r23
 744:	6f 91       	pop	r22
 746:	5f 91       	pop	r21
 748:	4f 91       	pop	r20
 74a:	3f 91       	pop	r19
 74c:	2f 91       	pop	r18
 74e:	0f 90       	pop	r0
 750:	0f be       	out	0x3f, r0	; 63
 752:	0f 90       	pop	r0
 754:	1f 90       	pop	r1
 756:	18 95       	reti

00000758 <__divmodhi4>:
 758:	97 fb       	bst	r25, 7
 75a:	07 2e       	mov	r0, r23
 75c:	16 f4       	brtc	.+4      	; 0x762 <__divmodhi4+0xa>
 75e:	00 94       	com	r0
 760:	07 d0       	rcall	.+14     	; 0x770 <__divmodhi4_neg1>
 762:	77 fd       	sbrc	r23, 7
 764:	09 d0       	rcall	.+18     	; 0x778 <__divmodhi4_neg2>
 766:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <__udivmodhi4>
 76a:	07 fc       	sbrc	r0, 7
 76c:	05 d0       	rcall	.+10     	; 0x778 <__divmodhi4_neg2>
 76e:	3e f4       	brtc	.+14     	; 0x77e <__divmodhi4_exit>

00000770 <__divmodhi4_neg1>:
 770:	90 95       	com	r25
 772:	81 95       	neg	r24
 774:	9f 4f       	sbci	r25, 0xFF	; 255
 776:	08 95       	ret

00000778 <__divmodhi4_neg2>:
 778:	70 95       	com	r23
 77a:	61 95       	neg	r22
 77c:	7f 4f       	sbci	r23, 0xFF	; 255

0000077e <__divmodhi4_exit>:
 77e:	08 95       	ret

00000780 <__udivmodsi4>:
 780:	a1 e2       	ldi	r26, 0x21	; 33
 782:	1a 2e       	mov	r1, r26
 784:	aa 1b       	sub	r26, r26
 786:	bb 1b       	sub	r27, r27
 788:	fd 01       	movw	r30, r26
 78a:	0d c0       	rjmp	.+26     	; 0x7a6 <__udivmodsi4_ep>

0000078c <__udivmodsi4_loop>:
 78c:	aa 1f       	adc	r26, r26
 78e:	bb 1f       	adc	r27, r27
 790:	ee 1f       	adc	r30, r30
 792:	ff 1f       	adc	r31, r31
 794:	a2 17       	cp	r26, r18
 796:	b3 07       	cpc	r27, r19
 798:	e4 07       	cpc	r30, r20
 79a:	f5 07       	cpc	r31, r21
 79c:	20 f0       	brcs	.+8      	; 0x7a6 <__udivmodsi4_ep>
 79e:	a2 1b       	sub	r26, r18
 7a0:	b3 0b       	sbc	r27, r19
 7a2:	e4 0b       	sbc	r30, r20
 7a4:	f5 0b       	sbc	r31, r21

000007a6 <__udivmodsi4_ep>:
 7a6:	66 1f       	adc	r22, r22
 7a8:	77 1f       	adc	r23, r23
 7aa:	88 1f       	adc	r24, r24
 7ac:	99 1f       	adc	r25, r25
 7ae:	1a 94       	dec	r1
 7b0:	69 f7       	brne	.-38     	; 0x78c <__udivmodsi4_loop>
 7b2:	60 95       	com	r22
 7b4:	70 95       	com	r23
 7b6:	80 95       	com	r24
 7b8:	90 95       	com	r25
 7ba:	9b 01       	movw	r18, r22
 7bc:	ac 01       	movw	r20, r24
 7be:	bd 01       	movw	r22, r26
 7c0:	cf 01       	movw	r24, r30
 7c2:	08 95       	ret

000007c4 <__udivmodhi4>:
 7c4:	aa 1b       	sub	r26, r26
 7c6:	bb 1b       	sub	r27, r27
 7c8:	51 e1       	ldi	r21, 0x11	; 17
 7ca:	07 c0       	rjmp	.+14     	; 0x7da <__udivmodhi4_ep>

000007cc <__udivmodhi4_loop>:
 7cc:	aa 1f       	adc	r26, r26
 7ce:	bb 1f       	adc	r27, r27
 7d0:	a6 17       	cp	r26, r22
 7d2:	b7 07       	cpc	r27, r23
 7d4:	10 f0       	brcs	.+4      	; 0x7da <__udivmodhi4_ep>
 7d6:	a6 1b       	sub	r26, r22
 7d8:	b7 0b       	sbc	r27, r23

000007da <__udivmodhi4_ep>:
 7da:	88 1f       	adc	r24, r24
 7dc:	99 1f       	adc	r25, r25
 7de:	5a 95       	dec	r21
 7e0:	a9 f7       	brne	.-22     	; 0x7cc <__udivmodhi4_loop>
 7e2:	80 95       	com	r24
 7e4:	90 95       	com	r25
 7e6:	bc 01       	movw	r22, r24
 7e8:	cd 01       	movw	r24, r26
 7ea:	08 95       	ret

000007ec <_exit>:
 7ec:	f8 94       	cli

000007ee <__stop_program>:
 7ee:	ff cf       	rjmp	.-2      	; 0x7ee <__stop_program>
